# Exercise 11.1:

def make_word_dict():
    """Reads the words in words.txt and makes a dictionary containing each word
    as a key."""

    d = {}
    fin = open("words.txt")
    for line in fin:
        d[line.strip()] = None
    fin.close()

    return d


# Exercise 11.2:

def invert_dict(d):
    """Returns an inversion of dictionary d, in which keys are now values (in a list of multiple elements if multiple
    keys map to identical values, or a singleton list otherwise) and values are now keys."""

    inverse = dict()
    for key in d:
        val = d[key]
        inverse.setdefault(val, []).append(key)     # Sees if val is a key in inverse; if it's not, it creates the
                                                        # empty list [] as a value to the key val. The key in question
                                                        # gets appended either to [] or to whatever list is there
                                                        # currently.
    return inverse


# Exercise 11.3:

known = {}

def ack(m, n):
    """Evaluates the Ackerman function given non-negative integers m and n."""

    if m == 0:
        return n + 1
    elif n == 0:
        return ack(m - 1, 1)

    if (m, n) in known:
        return known[m, n]  # This searches for a tuple key, not a list key.
    else:
        known[m, n] = ack(m - 1, ack(m, n - 1))
        return known[m, n]


# Exercise 11.4:

def has_duplicates(t):
    """Takes a list and, using dictionaries, returns True if there is any element that appears more than once and
    False otherwise."""

    d = {}
    for x in t:
        if x in d:
            return True
        d[x] = None
    return False

def has_duplicates2(t):
    """Takes a list and, using sets, returns True if there is any element that appears more than once and False
    otherwise."""

    return len(set(t)) < len(t)


# Exercise 11.5:

def rotate_letter(letter, n):
    """Rotates a letter by n places. Does not change other chars.
    letter: single-letter string
    n: int
    Returns: single-letter string
    """
    if letter.isupper():
        start = ord('A')
    elif letter.islower():
        start = ord('a')
    else:
        return letter

    c = ord(letter) - start
    i = (c + n) % 26 + start
    return chr(i)


def rotate_word(word, n):
    """Rotates a word by n places.
    word: string
    n: integer
    Returns: string
    """
    res = ''
    for letter in word:
        res += rotate_letter(letter, n)
    return res

def rotate_pairs(word, word_dict):
    """Prints all words that can be generated by rotating a word, or nothing if
    there is no pair for the given word.

    word: string
    word_dict: dictionary with words as keys
    """

    pair = word
    for n in range(1, 14):  # Between 1 and 13 rather than 1 and 25 because if one word can be rotated x to make
                                # another, the latter can simply be rotated 26 - x to make the original. At least one
                                # of x and 26 - x will be smaller than or equal to 13, so this range just picks the
                                # word that can be rotated fewer places to make the new one, and thereby avoids
                                # duplicates.
        if rotate_word(word, n) in d:
            pair += " " + rotate_word(word, n)
    if not pair == word:
        print(pair)

# d = make_word_dict()
# for word in d:
#     rotate_pairs(word, d)


# Exercise 11.6:

# import pronounce
#
# # Each key is a letter opened and closed with a single inverted comma
# d = pronounce.read_dictionary(filename='c06d.txt')
#
# for word in d:
#         subword1 = word[1:]
#         subword2 = word[0] + word[2:]
#         if subword1 in d and subword2 in d and not subword1 == subword2:
#             if d[subword1] == d[subword2]:
#                 print(word + ":", subword1, "&", subword2)